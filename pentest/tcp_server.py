# -*- coding: utf-8 -*-
'''
 The MIT License (MIT)
 
 Copyright (c) 2015 Leon Lee @ lee.leon0519@gmail.com
 
 Permission is hereby granted, free of charge, to any person obtaining a copy of
 this software and associated documentation files (the "Software"), to deal in
 the Software without restriction, including without limitation the rights to
 use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 the Software, and to permit persons to whom the Software is furnished to do so,
 subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in all
 copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

'''
 File Name   : tcp_server.py
 Author      : Leon Lee
 Mail        : lee.leon0519@gmail.com
 Created Time: Wed 23 Jul 2014 12:03:56 PM CST
 Description : This python script is used to
 
'''
import sys
import socket
import getopt
import threading
import subprocess

def usage():
    print "Net Tools by Leon"
    print
    print "Usage: netools.py -t target_host -p port"
    print "-l --listen                 -listen on [host]:[port] for incoming connections"
    print "-e --execute=file_to_run    -execute the given file upon receiving a connection"
    print "-c --commandshell           -initialize a command shell"
    print "-u --upload=destination     -upon receiving connection upload a file and write to [destination]"
    print 
    print
    print "Examples:"
    print "netools.py -t 192.168.3.1 -p 5555 -l -c"
    print "netools.py -t 192.168.3.1 -p 5555 -l -u=c:\\target.exe"
    print "netools.py -t 192.168.3.1 -p 5555 -l -e=\"cat /etc/passwd\""
    print "echo 'ABCDEFG' | ./netools.py -t 192.168.3.1 -p 135"
    sys.exit(0)
    
def entry():
    global listen
    global port
    global execute
    global command
    global upload_destination
    global target
    
    if not len(sys.argv[1:]):
        usage()
    
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hle:t:p:cu:",["help",'listen',"execute","target","port","command","upload"])
    except getopt.GetoptError as err:
        print str(err)
        usage()
        
    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
        if o in ("-l", "--listen"):
            listen = True
        if o in ("-e", "--execute"):
            execute = a
        if o in ("-c", "--commandshell"):
            command = a
        if o in ("-u", "--upload"):
            upload_destination = a
        if o in ("-t", "target"):
            target = a
        if o in ("-p", "port"):
            port = int(a)
        else:
            assert Flase,"Unhandled Option."
    
    # Act as a client         
    if not listen and len(target) and port > 0:
        buffer = sys.stdin.read()
        client_sender(buffer)
    
    # Act as a server
    if listen:
        server_loop()

def client_sender():
    # Initiate a TCP socket client
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        client.connect((target,port))
        if len(buffer):
            client.send(buffer)
        while True:
            recv_len = 1
            response = ""
            while recv_len:
                data = client.recv(4096)
                recv_len = len(data)
                response += data
                if recv_len < 4096:
                    break
            print response
        
            # Conitue send buffer read from input
            buffer = raw_input("")
            buffer += "\n"
            client.send(buffer)
    except:
        print "[*] Exception! Exiting."
        client.close()
        
def server_loop():
    global target
    
    if not len(target):
        target = "0.0.0.0"
        
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((target,port))
    server.listen(100)
    
    while True:
        client_socket, addr = server.accept()
        client_thread = threading.Thread(target=client_handler, args=(client_socket,))
        clien_thread.start()
    
def run_command(command):
    command = command.rstrip()
    # run the command and get the output back
    try:
        output = subprocess.check_output(command,stderr=subprocess.STDOUT, shell=True)
    except:
        output = "Failed to execute command.\r\n"
    # send the output back to the client
    return output


def client_handler(client_socket):
    global upload
    global execute
    global command
    # check for upload
    if len(upload_destination):
        # read in all of the bytes and write to our destination
        file_buffer = ""
        # keep reading data until none is available
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            else:
                file_buffer += data
        # now we take these bytes and try to write them out
        try:
            file_descriptor = open(upload_destination,"wb")
            file_descriptor.write(file_buffer)
            file_descriptor.close()
        # acknowledge that we wrote the file out
        client_socket.send("Successfully saved file to %s\r\n" % upload_destination)
        except:
            client_socket.send("Failed to save file to %s\r\n" % upload_destination)
    # check for command execution
    if len(execute):
    # run the command
    output = run_command(execute)
    client_socket.send(output)
    
    if command:
        while True:
            # show a simple prompt
            client_socket.send("<BHP:#> ")
            # now we receive until we see a linefeed
            (enter key)
            cmd_buffer = ""
            while "\n" not in cmd_buffer:
                cmd_buffer += client_socket.recv(1024)
                # send back the command output
            response = run_command(cmd_buffer)
            # send back the response
            client_socket.send(response)


    
    

if __name__ == "__main__":
    # Define some options
    listen = False
    command = False
    upload = False
    execute = ""
    target = ""
    upload_destination = ""
    port = 0
    # bind_ip = "0.0.0.0"
    # bind_port = 9999
    entry()

        
        

            

    
    







server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((bind_ip, bind_port))

server.listen(5)

print "[*] Listening on %s:%d" % (bind_ip, bind_port)

def handle_client(client_socket):
    request = client_socket.recv(1024)
    print "[*] Received: %s" % request
    
    client.socket.send("ACK!")
    client.socket.close()
    
while True:
    client, addr = server.accept()
    print "[*] Accepted connection from: %s:%d" % (addr[0], addr[1])
    client_handler = threading.Thread(target=handle_client, args=(client,))
    client_handler.start()
    
